{"version":3,"sources":["utils/pixelgeneration.worker.js","components/Title.js","utils/ScreenUtils.js","components/PixelCanvas.js","components/ExpressionBasedPixelGen.js","components/About.js","components/Examples.js","App.js","serviceWorker.js","index.js"],"names":["addMethods","methods","module","exports","w","Worker","name","Title","className","to","powerOf2ScreenWidth","screenWidth","window","screen","width","power","finalPower","Math","max","adjustDimension","dimensionLength","screenAdjustmentRatio","round","workerInstance","PixelGenerationWorker","workerReady","PixelCanvas","height","red","green","blue","useState","imageBase64Src","setImageBase64Src","workerIsReady","setWorkerIsReady","renderedParams","setRenderedParams","paramsInProgress","setParamsInProgress","progress","setProgress","paramsToRender","scale","paramsChanged","_","isEqual","currParamsAreInProgress","useEffect","onmessage","message","data","type","method","imageSource","totalProgress","newProgress","calculateBase64","LoadingText","isNil","src","DEFAULT_SIDE_LENGTH","min","DEFAULT_QUERY_PARAMS","r","g","b","h","ExpressionBasedPixelGen","console","log","history","useHistory","location","useLocation","useForm","register","handleSubmit","givenSearchParams","URLSearchParams","search","exampleFilename","get","exampleParams","exampleObj","find","imageExamples","filename","pick","getExampleParams","givenSearchParamsObj","Object","fromEntries","entries","queryParamsAfterDefaults","defaults","cloneDeep","powerOf2Dim","cleanedParams","keys","push","pathname","toString","Number","onSubmit","formData","newQueryParams","placeholder","defaultValue","ref","required","value","About","target","href","ImageExample","queryParams","example","key","alt","id","Examples","map","App","ReactGA","set","page","pageview","updateLocationForGA","exact","path","data-color-scheme","data-icon","aria-label","Boolean","hostname","match","initialize","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.dc7b6cc0.chunk.js","sourcesContent":["\n\t\t\t\tvar addMethods = require(\"../../node_modules/workerize-loader/dist/rpc-wrapper.js\")\n\t\t\t\tvar methods = [\"clamp\",\"linearInterpolate\",\"PixelGeneratorResult\",\"PixelGenerator\",\"calculateBase64\"]\n\t\t\t\tmodule.exports = function() {\n\t\t\t\t\tvar w = new Worker(__webpack_public_path__ + \"1b0187acc72b1184ac52.worker.js\", { name: \"[hash].worker.js\" })\n\t\t\t\t\taddMethods(w, methods)\n\t\t\t\t\t\n\t\t\t\t\treturn w\n\t\t\t\t}\n\t\t\t","import React from 'react';\nimport {Link} from \"react-router-dom\";\nimport './Common.css';\nimport './Title.css';\n\nexport default function Title() {\n    return (<h1 className=\"pixel-mist-title\"><Link to=\"/\">PIXEL MIST</Link></h1>);\n}","const EXPECTED_WIDTH = 1440;\n\n/**\n * Many images render best with a dimension that is a power of 2.\n * Avoids aliasing. Especially true for the default landing page image.\n */\nexport function powerOf2ScreenWidth() {\n    const screenWidth = window.screen.width;\n    let power = 4;\n    while (power < 12 && (2 ** power) < screenWidth) {\n        power++;\n    }\n    const finalPower = Math.max(8, power - 1);\n    return 2 ** finalPower;\n}\n\nexport function adjustDimension(dimensionLength) {\n    const screenAdjustmentRatio = window.screen.width / EXPECTED_WIDTH;\n    return Math.round(dimensionLength * screenAdjustmentRatio);\n}\n","import React, { useState, useEffect } from 'react';\nimport _ from \"lodash\";\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport PixelGenerationWorker from 'workerize-loader!../utils/pixelgeneration.worker.js';\nimport './PixelCanvas.css'\n\nconst DEFAULT_SCALE = 1024;\nconst workerInstance = PixelGenerationWorker();\nlet workerReady = false;\n\n\nexport default function PixelCanvas({ width, height, red, green, blue }) {\n    const [imageBase64Src, setImageBase64Src] = useState(null);\n    const [workerIsReady, setWorkerIsReady] = useState(workerReady);\n    const [renderedParams, setRenderedParams] = useState(null);\n    const [paramsInProgress, setParamsInProgress] = useState(null);\n    const [progress, setProgress] = useState(0.0);\n\n    const paramsToRender = {\n        scale: DEFAULT_SCALE,\n        width, height, red, green, blue,\n    };\n\n    const paramsChanged = !_.isEqual(paramsToRender, renderedParams);\n    const currParamsAreInProgress = _.isEqual(paramsToRender, paramsInProgress);\n\n    useEffect(() => {\n        workerInstance.onmessage = (message) => {\n            if (_.isEqual(message.data, { type: \"RPC\", method: \"ready\" })) {\n                setWorkerIsReady(true);\n                workerReady = true;\n            } else if (message.data.imageSource) {\n                setImageBase64Src(message.data.imageSource);\n                setRenderedParams(message.data.renderedParams);\n                setParamsInProgress(null);\n            } else if (message.data.totalProgress) {\n                const newProgress = Math.round(message.data.totalProgress * 100);\n                setProgress(newProgress);\n            }\n        };\n\n        if (workerIsReady && paramsChanged && !currParamsAreInProgress) {\n            setParamsInProgress(paramsToRender);\n            workerInstance.calculateBase64(paramsToRender);\n        }\n    });\n\n    const shouldShowLoading = _.isNil(imageBase64Src) || !workerIsReady || (paramsChanged && currParamsAreInProgress);\n    const LoadingText = () => progress === 100 ? <p>Finishing Touches...</p> : <p>Loading {`${progress}%`}...</p>;\n\n    if (shouldShowLoading) {\n        return <LoadingText />\n    } else {\n        return (<img width={`${width}px`} height={`${height}px`} src={imageBase64Src} className=\"main-canvas\" />);\n    }\n}\n","import React from 'react';\nimport _ from 'lodash';\nimport { useForm } from \"react-hook-form\";\nimport {\n    useHistory,\n    useLocation,\n    Link\n} from \"react-router-dom\";\nimport { adjustDimension, powerOf2ScreenWidth } from '../utils/ScreenUtils';\nimport imageExamples from './imageExamples.json';\nimport './Common.css';\nimport './ExpressionBasedPixelGen.css'\nimport PixelCanvas from './PixelCanvas';\n\nconst DEFAULT_SIDE_LENGTH = Math.min(1024, powerOf2ScreenWidth());\n\nconst DEFAULT_QUERY_PARAMS = {\n    r: \"(Math.hypot(Math.abs(x), Math.abs(y)) + (Math.abs(x) & Math.abs(y))) / 2\",\n    g: \"Math.tanh(Math.abs(x) & Math.abs(y))\",\n    b: \"Math.abs(x) ^ Math.abs(y)\",\n    h: DEFAULT_SIDE_LENGTH,\n    w: DEFAULT_SIDE_LENGTH,\n};\n\nfunction getExampleParams(exampleFilename) {\n    const exampleObj = _.find(imageExamples, {filename: exampleFilename});\n    if (exampleObj) {\n        exampleObj.w = Math.min(exampleObj.w, adjustDimension(exampleObj.w));\n        exampleObj.h = Math.min(exampleObj.h, adjustDimension(exampleObj.h));\n    }\n    return exampleObj ? _.pick(exampleObj, ['r', 'g', 'b', 'w', 'h', 'powerOf2Dim']) : null;\n}\n\nexport default function ExpressionBasedPixelGen() {\n    console.log(\"Called ExpressionBasedPixelGen\");\n    const history = useHistory();\n    const location = useLocation();\n    const { register, handleSubmit } = useForm();\n\n    const givenSearchParams = new URLSearchParams(location.search);\n    const exampleFilename = givenSearchParams.get('example') || null;\n    const exampleParams = exampleFilename ? getExampleParams(exampleFilename) || {} : {};\n    const givenSearchParamsObj = Object.fromEntries(givenSearchParams.entries());\n    const queryParamsAfterDefaults = _.defaults(_.cloneDeep(givenSearchParamsObj), exampleParams, DEFAULT_QUERY_PARAMS);\n\n    // If there is a param called powerOf2Dim, default w & h to be the best power of 2\n    if (queryParamsAfterDefaults.powerOf2Dim === 'true' || queryParamsAfterDefaults.powerOf2Dim === true) {\n        queryParamsAfterDefaults.w = powerOf2ScreenWidth();\n        queryParamsAfterDefaults.h = powerOf2ScreenWidth();\n        console.log({queryParamsAfterDefaults});\n        delete queryParamsAfterDefaults.powerOf2Dim;\n    }\n\n    const cleanedParams = _.pick(queryParamsAfterDefaults, Object.keys(DEFAULT_QUERY_PARAMS));\n\n    let shouldUpdateQueryParams = !_.isEqual(cleanedParams, givenSearchParamsObj);\n    if (shouldUpdateQueryParams) {\n        history.push({\n            pathname: location.pathname,\n            search: new URLSearchParams(cleanedParams).toString()\n        });\n        return null;\n    }\n\n    const {r, g, b, w, h} = queryParamsAfterDefaults;\n\n    function onFormSubmit(formData) {\n        const newQueryParams = _.pick(formData, Object.keys(DEFAULT_QUERY_PARAMS));\n        history.push({\n            pathname: location.pathname,\n            search: new URLSearchParams(newQueryParams).toString()\n        });\n    }\n\n    return (\n        <div>\n            <div className=\"container\">\n                <PixelCanvas width={Number(w)} height={Number(h)} red={r} green={g} blue={b}></PixelCanvas>\n                <form className=\"expression-form\" onSubmit={handleSubmit(onFormSubmit)}>\n                    <input type=\"number\" name=\"w\" min=\"1\" placeholder=\"Width in pixels\" defaultValue={Number(w)} ref={register({ required: true })} />\n                    <input type=\"number\" name=\"h\" min=\"1\" placeholder=\"Height in pixels\" defaultValue={Number(h)} ref={register({ required: true })} />\n                    <br />\n                    <input type=\"input\" name=\"r\" placeholder=\"Red Expression\" defaultValue={r} ref={register({ required: true })} className=\"red\" />\n                    <br />\n                    <input type=\"input\" name=\"g\" placeholder=\"Green Expression\" defaultValue={g} ref={register({ required: true })} className=\"green\" />\n                    <br />\n                    <input type=\"input\" name=\"b\" placeholder=\"Blue Expression\" defaultValue={b} ref={register({ required: true })} className=\"blue\" />\n                    <br />\n                    <input type=\"submit\" value=\"Submit\" />\n                </form>\n                <div className=\"footer\">\n                    <Link to=\"/about\"><h2 className=\"footer-link\">About</h2></Link>\n                    <Link to=\"/examples\"><h2 className=\"footer-link\">Examples</h2></Link>\n                </div>\n            </div>\n        </div>\n    );\n};\n","import React from 'react';\nimport {Link} from \"react-router-dom\";\nimport {adjustDimension} from '../utils/ScreenUtils';\nimport './Common.css';\nimport './About.css';\n\nexport default function About() {\n    return (\n        <div>\n            <div className=\"about-container\">\n                <h1>What is this?</h1>\n                <p>\n                    Pixel Mist is a tool that gives you a new way to visualize mathematical expressions. It's kind of like \n                    a pixel shader but a lot simpler and more approachable. You can use it to create custom gradients, \n                    generate interesting patterns, and get a better understanding of mathematics.\n                </p>\n                <h1>How does it work?</h1>\n                <p>\n                    I'm gonna assume you know about the <a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/RGB_color_model\">RGB color model</a>.\n                    <br/><br/>\n                    You are given five form fields to fill out:\n                    <ul>\n                        <li>Width</li>\n                        <li>Height</li>\n                        <li>Red Expression</li>\n                        <li>Green Expression</li>\n                        <li>Blue Expression</li>\n                    </ul>\n                    Width & height are used to specify dimensions of the generated image in number of pixels.\n                    <br/><br/>\n                    The RGB expressions are used to dictate what the color of each individual pixel should be at each XY coordinate in the image.\n                    This uses a cartesian coordinate system where the origin (0,0) is at the center of the image. Both the X & Y axis have a maximum absolute value of 1024.\n                    <br/><br/>\n                    You're really specifying <code>R(x, y), G(x, y), B(x, y)</code>. Those values are calculated for the entire dimensions of the image. \n                    <br/><br/>\n                    The min & max values generated by your expression are mapped to 0 and 255 respectively with every other value in between being \n                    linearly interpolated. The outputs for the individual R, G, & B channels are then coalesced to create the resulting image.\n                    <br/><br/>\n                    The expressions you write can do anything you can do in vanilla Javascript. That means you have full access to the <a target=\"_blank\" href=\"https://www.w3schools.com/js/js_math.asp\">Math</a> object.\n                    Also, in addition to being able to use the dynamic variables x & y which represent a pixel's coordinate position, you can \n                    also reference static variables w & h which represent the width & height of the output image.\n                    <br/><br/>\n                    P.S. All the computation is happening in the browser on <i>your computer</i>. There's no backend for this website at all because I'm not paying for that 😛\n                </p>\n                <h1>Who made it?</h1>\n                <p><a target=\"_blank\" href=\"https://github.com/sourabhdesai/\">I did</a></p>\n                <h1>Where can I report a bug or submit a feature request?</h1>\n                <p><a target=\"_blank\" href=\"https://github.com/sourabhdesai/PixelMist/issues/new\">Here</a></p>\n                <h1>Why does this exist?</h1>\n                <p>\n                    It was the summer after freshman year of my Computer Science undergrad and the\n                    world of programming was consuming me. I was playing around with a homework assignment I had gotten during\n                    the school year that involved editing images pixel-by-pixel. I decided to see what would happen if I\n                    generated an entire image from code by specifying mathematical equations for each RGB color channel.\n                    <br/><br/>\n                    I quickly realized that I could make images with fascinating patterns using this method. For example, I \n                    found that using the expression Math.tanh(x & y) would result in a <a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Sierpi%C5%84ski_triangle\">Sierpiński triangle</a> \n                    pattern (<Link to={`/PixelMist/?r=Math.tanh%28x+%26+y%29&g=Math.tanh%28x+%26+y%29&b=Math.tanh%28x+%26+y%29&h=${adjustDimension(500)}&w=${adjustDimension(500)}`}>try for yourself</Link>). \n                    I could utilize my mathematical knowledge to adjust images to match my aesthetic preferences.\n                    <br/><br/>\n                    Besides being a way to keep my coding skills sharp over the summer, I found myself spending hours \n                    just creating new interesting patterns with this tool. I'm pretty certain I'm not the only one that would \n                    find this interesting to play with.\n                    <br/><br/>\n                    Fast forward 8 years and the world is undergoing a global pandemic which leaves me with a lot of free time \n                    being at home in quarantine. Enough free time to dust off the old side project from all those years ago and \n                    turn it into a website so everyone can be as captivated by it as I was.\n                </p>\n            </div>\n        </div>\n    );\n}\n","import React from 'react';\nimport './Examples.css';\nimport imageExamples from './imageExamples.json';\n\nfunction ImageExample({filename}) {\n    const queryParams = new URLSearchParams({example: filename});\n    return (\n        <a href={`/PixelMist?${queryParams.toString()}`} key={filename}>\n            <img alt={filename} id={filename} className=\"example-img\" src={`/PixelMist/images/examples/${filename}`} />\n        </a>\n    );\n}\n\nexport default function Examples() {\n    return (\n        <div>\n            <p>A few examples to get you started<br/>Click image to open in editor</p>\n            {imageExamples.map(ImageExample)}\n        </div>\n    );\n}\n","import React from 'react';\nimport {\n  useLocation,\n  Switch,\n  Route,\n  Link,\n  Redirect\n} from \"react-router-dom\";\nimport ReactGA from 'react-ga';\nimport GitHubButton from 'react-github-btn';\nimport './App.css';\nimport Title from './components/Title';\nimport ExpressionBasedPixelGen from './components/ExpressionBasedPixelGen';\nimport About from './components/About';\nimport Examples from './components/Examples';\n\n\nfunction updateLocationForGA(location) {\n  ReactGA.set({ page: location.pathname });\n  ReactGA.pageview(location.pathname);\n}\n\nfunction App() {\n  const location = useLocation();\n  updateLocationForGA(location);\n  return (\n    <div className=\"App\">\n      <Title />\n      <Switch>\n        <Route exact path=\"/PixelMist\">\n          <ExpressionBasedPixelGen />\n        </Route>\n        <Route exact path=\"/PixelMist/about\">\n          <About />\n        </Route>\n        <Route exact path=\"/PixelMist/examples\">\n          <Examples />\n        </Route>\n        <Redirect to=\"/PixelMist\" />\n      </Switch>\n      <div className=\"footer\">\n        <Link to=\"/PixelMist/about\"><h2 className=\"footer-link\">About</h2></Link>\n        <Link to=\"/PixelMist/examples\"><h2 className=\"footer-link\">Examples</h2></Link>\n        <div className=\"github-btn\">\n          <GitHubButton href=\"https://github.com/sourabhdesai/PixelMist\"\n            data-color-scheme=\"no-preference: dark; light: dark; dark: dark;\"\n            data-icon=\"octicon-star\" aria-label=\"Star sourabhdesai/PixelMist on GitHub\">Star</GitHubButton>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport ReactGA from 'react-ga';\nimport {\n  BrowserRouter as Router,\n} from \"react-router-dom\";\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactGA.initialize('UA-68475136-3');\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}